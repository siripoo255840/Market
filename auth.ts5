// src/lib/auth.ts
import { jwtVerify, SignJWT } from 'jose';
import { cookies } from 'next/headers';
import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';

// Configuration constants
const AUTH_CONFIG = {
  JWT_SECRET: process.env.JWT_SECRET || 'thaimarket-secret-key-for-jwt-authentication',
  COOKIE_NAME: 'thaimarket-auth-token',
  TOKEN_EXPIRATION: '24h',
  SESSION_MAX_AGE: 60 * 60 * 24, // 1 day in seconds
  PASSWORD_RESET_EXPIRATION: 60 * 60 * 2, // 2 hours
  SECURE_COOKIE: process.env.NODE_ENV === 'production',
  SAME_SITE: 'strict' as const,
} as const;

export type UserRole = 'customer' | 'seller' | 'admin';

export interface UserData {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  phoneNumber?: string;
  role: UserRole;
  avatar?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

// Generate secure secret key
const secretKey = new TextEncoder().encode(AUTH_CONFIG.JWT_SECRET);

/**
 * Create JWT token with user data
 */
export async function signToken(payload: UserData): Promise<string> {
  return new SignJWT({ 
    ...payload,
    // Add additional security claims
    iss: 'thaimarket.co',
    aud: 'thaimarket-client',
  })
    .setProtectedHeader({ alg: 'HS256' })
    .setIssuedAt()
    .setExpirationTime(AUTH_CONFIG.TOKEN_EXPIRATION)
    .sign(secretKey);
}

/**
 * Verify JWT token and return user data
 */
export async function verifyToken(token: string): Promise<UserData | null> {
  try {
    const { payload } = await jwtVerify(token, secretKey, {
      issuer: 'thaimarket.co',
      audience: 'thaimarket-client',
    });
    
    // Validate payload structure
    if (!payload.id || !payload.email || !payload.role) {
      throw new Error('Invalid token payload');
    }
    
    return payload as UserData;
  } catch (error) {
    console.error('Token verification failed:', error);
    return null;
  }
}

/**
 * Set secure auth cookie with HttpOnly and other security flags
 */
export function setAuthCookie(token: string): void {
  cookies().set({
    name: AUTH_CONFIG.COOKIE_NAME,
    value: token,
    httpOnly: true,
    path: '/',
    secure: AUTH_CONFIG.SECURE_COOKIE,
    maxAge: AUTH_CONFIG.SESSION_MAX_AGE,
    sameSite: AUTH_CONFIG.SAME_SITE,
    // Additional security attributes
    domain: process.env.COOKIE_DOMAIN || undefined,
    priority: 'high',
  });
}

/**
 * Remove auth cookie on logout
 */
export function removeAuthCookie(): void {
  cookies().delete(AUTH_CONFIG.COOKIE_NAME);
}

/**
 * Get current authenticated user from cookie
 */
export async function getCurrentUser(): Promise<UserData | null> {
  const token = cookies().get(AUTH_CONFIG.COOKIE_NAME)?.value;
  if (!token) return null;
  return verifyToken(token);
}

/**
 * Auth middleware for route protection
 */
export async function authMiddleware(
  req: NextRequest,
  allowedRoles: UserRole[] = ['customer', 'seller', 'admin']
): Promise<NextResponse | null> {
  const token = req.cookies.get(AUTH_CONFIG.COOKIE_NAME)?.value;
  
  if (!token) {
    return NextResponse.json(
      { 
        success: false,
        error: {
          code: 'UNAUTHORIZED',
          message: 'Authentication required',
          details: 'No authentication token provided'
        }
      },
      { status: 401 }
    );
  }
  
  const user = await verifyToken(token);
  
  if (!user) {
    // Clear invalid token
    removeAuthCookie();
    return NextResponse.json(
      { 
        success: false,
        error: {
          code: 'INVALID_TOKEN',
          message: 'Invalid session',
          details: 'Your session is invalid or expired'
        }
      },
      { status: 401 }
    );
  }
  
  if (!allowedRoles.includes(user.role)) {
    return NextResponse.json(
      { 
        success: false,
        error: {
          code: 'FORBIDDEN',
          message: 'Permission denied',
          details: `Your role (${user.role}) doesn't have access to this resource`
        }
      },
      { status: 403 }
    );
  }
  
  return null; // No error, proceed
}

/**
 * Generate password reset token
 */
export function generatePasswordResetToken(): {
  token: string;
  expiresAt: Date;
} {
  const token = crypto.randomBytes(32).toString('hex');
  const expiresAt = new Date(Date.now() + AUTH_CONFIG.PASSWORD_RESET_EXPIRATION * 1000);
  
  return {
    token,
    expiresAt
  };
}

// Mock database implementation (replace with real database in production)
const mockUsers: Record<string, {
  id: string;
  email: string;
  passwordHash: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  role: UserRole;
  avatar?: string;
  createdAt: Date;
  updatedAt: Date;
}> = {};

/**
 * Mock login function (replace with real implementation)
 */
export async function mockLogin(
  email: string, 
  password: string
): Promise<{
  success: boolean;
  token?: string;
  user?: UserData;
  error?: {
    code: string;
    message: string;
    details?: string;
  };
}> {
  const user = mockUsers[email];
  
  if (!user) {
    return { 
      success: false, 
      error: {
        code: 'USER_NOT_FOUND',
        message: 'Authentication failed',
        details: 'No account found with this email'
      }
    };
  }
  
  // In real implementation, use bcrypt.compare
  const passwordMatches = password === 'password123'; // Default password for testing
  
  if (!passwordMatches) {
    return { 
      success: false, 
      error: {
        code: 'INVALID_CREDENTIALS',
        message: 'Authentication failed',
        details: 'Incorrect password'
      }
    };
  }
  
  const userData: UserData = {
    id: user.id,
    email: user.email,
    firstName: user.firstName,
    lastName: user.lastName,
    phoneNumber: user.phoneNumber,
    role: user.role,
    avatar: user.avatar,
    createdAt: user.createdAt,
    updatedAt: user.updatedAt
  };
  
  const token = await signToken(userData);
  
  return {
    success: true,
    token,
    user: userData
  };
}

/**
 * Mock registration function (replace with real implementation)
 */
export async function mockRegister(userData: {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
}): Promise<{
  success: boolean;
  token?: string;
  user?: UserData;
  error?: {
    code: string;
    message: string;
    details?: string;
  };
}> {
  // Email validation
  if (!/^\S+@\S+\.\S+$/.test(userData.email)) {
    return {
      success: false,
      error: {
        code: 'INVALID_EMAIL',
        message: 'Invalid email format',
        details: 'Please provide a valid email address'
      }
    };
  }
  
  // Check if email exists
  if (mockUsers[userData.email]) {
    return { 
      success: false, 
      error: {
        code: 'EMAIL_EXISTS',
        message: 'Registration failed',
        details: 'This email is already registered'
      }
    };
  }
  
  // Password validation
  if (userData.password.length < 8) {
    return {
      success: false,
      error: {
        code: 'WEAK_PASSWORD',
        message: 'Password too weak',
        details: 'Password must be at least 8 characters'
      }
    };
  }
  
  // Create new user
  const newUserId = `user${Object.keys(mockUsers).length + 1}`;
  const now = new Date();
  
  // In real implementation, use bcrypt.hash
  const passwordHash = `hashed_${userData.password}`;
  
  mockUsers[userData.email] = {
    id: newUserId,
    email: userData.email,
    passwordHash,
    firstName: userData.firstName,
    lastName: userData.lastName,
    phoneNumber: userData.phoneNumber,
    role: 'customer',
    createdAt: now,
    updatedAt: now
  };
  
  const newUserData: UserData = {
    id: newUserId,
    email: userData.email,
    firstName: userData.firstName,
    lastName: userData.lastName,
    phoneNumber: userData.phoneNumber,
    role: 'customer',
    createdAt: now,
    updatedAt: now
  };
  
  const token = await signToken(newUserData);
  
  return {
    success: true,
    token,
    user: newUserData
  };
}

/**
 * Mock password reset function
 */
export async function mockRequestPasswordReset(
  email: string
): Promise<{
  success: boolean;
  resetToken?: string;
  expiresAt?: Date;
  error?: {
    code: string;
    message: string;
    details?: string;
  };
}> {
  const user = mockUsers[email];
  
  if (!user) {
    return {
      success: false,
      error: {
        code: 'USER_NOT_FOUND',
        message: 'Password reset failed',
        details: 'No account found with this email'
      }
    };
  }
  
  const { token, expiresAt } = generatePasswordResetToken();
  
  // In real implementation, store this token in database with expiration
  // and send email with reset link
  
  return {
    success: true,
    resetToken: token,
    expiresAt
  };
}
JWT_SECRET=your_secure_jwt_secret_here
COOKIE_DOMAIN=.thaimarket.co # optional
